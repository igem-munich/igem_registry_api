"""Run local BLAST search with registry parts.

This script demonstrates how to perform a local BLAST search using parts from
the iGEM Registry API. It processes a Brotli-compressed JSON file containing
registry parts, converts it to a FASTA file, creates a BLAST database, and
executes a BLASTn query against the database. The results are formatted and
displayed in a human-readable table format.

This example requires NCBI BLAST+ to be installed and available in the system
`PATH`: https://blast.ncbi.nlm.nih.gov/doc/blast-help/downloadblastdata.html.
Additionally, it requires a file containing registry parts (`parts.tar.br`),
which can be generated by another example script (`registry_dump.py`).
Finally, a query FASTA file (`query.fasta`) is needed for the BLAST search.
"""

from __future__ import annotations

import json
import subprocess
from pathlib import Path
from typing import TYPE_CHECKING

import brotli
from Bio import SeqIO
from Bio.Blast import NCBIXML
from Bio.Seq import Seq
from Bio.SeqRecord import SeqRecord
from rich.console import Console
from rich.table import Table

if TYPE_CHECKING:
    from collections.abc import Iterable


DATA = Path("examples/data/parts.tar.br")
FASTA = Path("examples/data/parts.fasta")
DATABASE = Path("examples/data/blast/db")

QUERY = Path("examples/data/query.fasta")
RESULT = Path("examples/data/results.xml")
HITS = 10  # Maximum number of hits to retrieve


def load_parts(path: Path) -> Iterable[dict]:
    """Stream objects from a Brotli-compressed JSON array."""
    with path.open("rb") as file:
        data = file.read()
        decompressed = brotli.decompress(data)
        parts = json.loads(decompressed.decode("utf-8"))
        yield from parts


def to_fasta(records: Iterable[SeqRecord], path: Path) -> None:
    """Write FASTA records to a file."""
    SeqIO.write(records, path, "fasta")


def get_seqrecords(parts: Iterable[dict]) -> Iterable[SeqRecord]:
    """Convert part dictionaries to SeqRecord objects."""
    for part in parts:
        seq = part["sequence"]
        slug = part["slug"]
        yield SeqRecord(Seq(seq), id=str(slug), description="")


def make_blastdb(fasta: Path, database: Path) -> None:
    """Create a BLAST database from a FASTA file."""
    command = [
        "makeblastdb",
        "-in",
        str(fasta.absolute()),
        "-dbtype",
        "nucl",
        "-out",
        database,
    ]
    subprocess.run(command, check=True)  # noqa: S603


def blastn_query(query: Path, database: Path, result: Path, hits: int) -> None:
    """Run BLASTn query against the specified database."""
    command = [
        "blastn",
        "-query",
        str(query),
        "-db",
        str(database),
        "-out",
        str(result),
        "-outfmt",
        "5",
        "-max_target_seqs",
        str(hits),
        "-evalue",
        "1e-5",
    ]
    subprocess.run(command, check=True)  # noqa: S603


def format_result(path: Path) -> Iterable[Table]:
    """Format BLAST XML results for display."""
    with path.open("r") as fh:
        records = NCBIXML.parse(fh)
        for record in records:
            table = Table(
                title=f"BLAST hits for query: {record.query}",
                show_lines=False,
            )
            table.add_column("#", justify="right")
            table.add_column("Subject")
            table.add_column("%ID", justify="right")
            table.add_column("%COV", justify="right")
            table.add_column("Len", justify="right")
            table.add_column("MM", justify="right")
            table.add_column("Gaps", justify="right")
            table.add_column("Q.start", justify="right")
            table.add_column("Q.end", justify="right")
            table.add_column("S.start", justify="right")
            table.add_column("S.end", justify="right")
            table.add_column("E", justify="right")
            table.add_column("Score", justify="right")
            table.add_column("Bits", justify="right")

            for rank, aln in enumerate(record.alignments, start=1):
                hsp = aln.hsps[0]
                subject = aln.hit_def

                spans = sorted(
                    (
                        min(h.sbjct_start, h.sbjct_end),
                        max(h.sbjct_start, h.sbjct_end),
                    )
                    for h in aln.hsps
                )
                merged = []
                for start, end in spans:
                    if merged and start <= merged[-1][1] + 1:
                        merged[-1] = (merged[-1][0], max(merged[-1][1], end))
                    else:
                        merged.append((start, end))
                covered = sum(end - start + 1 for start, end in merged)
                coverage = 100.0 * covered / aln.length

                length = hsp.align_length
                identities = hsp.identities
                identity = 100.0 * identities / length
                gaps = hsp.gaps
                mismatches = length - identities - gaps

                table.add_row(
                    str(rank),
                    str(subject),
                    f"{identity:.2f}",
                    f"{coverage:.2f}",
                    str(length),
                    str(mismatches),
                    str(gaps),
                    str(hsp.query_start),
                    str(hsp.query_end),
                    str(hsp.sbjct_start),
                    str(hsp.sbjct_end),
                    f"{hsp.expect:.3g}",
                    f"{hsp.score:.1f}",
                    f"{hsp.bits:.3f}",
                )
            yield table


def main() -> None:
    """Run local BLAST search with registry parts."""
    # 1. Convert compressed API response (JSON + brotli) to FASTA
    if not FASTA.exists():
        if not DATA.exists():
            msg = f"Missing input file: {DATA}."
            raise FileNotFoundError(msg)
        parts = load_parts(DATA)
        to_fasta(get_seqrecords(parts), FASTA)

    # 2. Create BLAST database from FASTA
    if not DATABASE.parent.exists() or not any(DATABASE.parent.iterdir()):
        make_blastdb(FASTA, DATABASE)

    # 3. Run BLAST query
    if QUERY.exists():
        blastn_query(QUERY, DATABASE, RESULT, HITS)

    # 4. Format and display results
    console = Console()
    for table in format_result(RESULT):
        console.print(table)


if __name__ == "__main__":
    main()
